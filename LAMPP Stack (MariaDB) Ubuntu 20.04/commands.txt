Update and upgrade, restart if needed

    $ sudo apt-get update
    $ sudo apt-get upgrade

Some essential packages:

    $ sudo apt-get install curl
    $ sudo apt-get install unzip
    $ sudo apt-get install rar

Install Apche2:

    $ sudo apt-get install -y apache2 apache2-utils
    $ sudo systemctl status apache2
    $ sudo systemctl start apache2
    $ sudo systemctl enable apache2
    $ apache2 -v

    Access http://localhost and check whether u are getting apache welcome page

    Apache Conf Test:
    $ sudo apache2ctl configtest
    $ sudo apache2ctl -t 

    To see apache live errors:
    $ tail -f /var/log/apache2/error.log

    Enabling allow override All

    $ cd /etc/apache2/
    $ sudo nano apache2.conf 

    change Allow override, None
    to Allow override, All

    Making index.php as default to load in Apache
    $ sudo nano /etc/apache2/mods-enabled/dir.conf
    And move index.php to front

If you have firewall enabled

    $ sudo ufw app list
    $ sudo ufw allow in "Apache Full"
    $ sudo ufw status

Giving permissions to user:

    $ sudo chown $USER /var/www/html
    $ sudo chown www-data:www-data -R (need to test)
    $ sudo chown www-data:www-data /var/www/html/ -R (need to test)
    $ sudo chown -R $USER:$USER /var/www/html (need to test)

Installing mariadb:

    $ sudo apt-get install mariadb-server mariadb-client

    $ sudo systemctl status mariadb
    $ sudo systemctl start mariadb
    $ sudo systemctl enable mariadb

    $ sudo mysql_secure_installation

        Instructions:
        1. Enter system root password
        2. Type 'n' and press enter
        3. Type 'Y' and press enter
        4. Type 'Y' and press enter
        5. Type 'Y' and press enter
        6. Type 'Y' and press enter

Creating a localhost maraidb user with all privileges:

    $ sudo mariadb -u root -p
    It asks for system root password enter it
    Add a mysql user to authenticate to db from localhost usng below mysql quries

    CREATE USER 'maxx'@localhost IDENTIFIED BY 'maxx123';
    GRANT ALL PRIVILEGES ON *.* TO 'maxx'@localhost IDENTIFIED BY 'maxx123';
    FLUSH PRIVILEGES;

Importing db from command line:

    $ mariadb -u root -p pandora < pandora.sql

Installing PHP:

    $ sudo apt-get install php libapache2-mod-php php-mysql php-common php-cli php-common php-json php-opcache php-readline php-intl
    $ sudo apt-get install openssl php-common php-curl php-json php-mbstring php-mysql php-xml php-zip php-cli
    $ sudo systemctl restart apache2

    Check php working or not, by creating php file in var/www/html with below code 
    <?php phpinfo(); ?>

Installing PHPmyadmin:

    Note: when installing phpmyadmin, in terminal it asks, for select server

    select option with space bar, (*) mark should appear infront of apache2, and then tab for selecting ok and press enter
    [*]Apache2
    []lighthttpd

    Next step in select dbconfig-common, select yes, and add a password

    $ sudo apt-get install phpmyadmin

    $ sudo systemctl reload apache2

    Next access http://localhost/phpmyadmin

    and login in with username and password we added after installing mariadb

Enable Mod rewrite:

    $ sudo a2enmod rewrite
    $ sudo systemctl restart apache2

Enabling ssl (https)

    $ sudo a2enmod ssl
    $ sudo systemctl restart apache2
    $ sudo mkdir /etc/apache2/ssl
    $ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt

    the paths mentioned for .key and .crt file need to be used for sites which are going to be accessed via https

Changing php.ini file

    $ sudo gedit /etc/php/7.4/apache2/php.ini 
    $ service apache2 restart

Add the virutal domains and hosts

    Adding domains

    $ sudo nano /etc/hosts

    Adding virual hosts

    $ cd /etc/apache2/sites-available/
    $ sudo nano default-ssl.conf 
    $ sudo nano 000-default.conf

    $ sudo a2ensite default-ssl.conf
    $ sudo a2ensite 000-default.conf

    $ sudo systemctl reload apache2

Apache Live Errors:

    $ cd /etc/apache2/
    $ ls -a
    $ tail -f error.log 
    $ tail -f /var/log/apache2/error.log