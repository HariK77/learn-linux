Symfony *****************************************************************************

Installing Symfony Installer:

	$ get https://get.symfony.com/cli/installer -O - | bash
	$ export PATH="$HOME/.symfony/bin:$PATH".  

Installing using symfony cli

	$ symfony new symfo-codes --full
	$ symfony new symfo-codes  (minimal)

Installing using composer

 	$ composer create-project symfony/website-skeleton symfo-codes
 	$ composer create-project symfony/skeleton symfo-codes
 	
Creating db fom cmd

	$ php bin/console doctrine:database:create (it will create a db with the name we provided in connection)

Commands:

	Start Server:
	$ symfony server:start

	See all avaialble commands:

	$ php bin/console

	Make Controller:
	$ php bin/console make:controller MainController

***************************************************************************************

Laravel *******************************************************************************

Laravel Installation:

	$ composer create-project laravel/laravel laravel-sample

laravel auth :

	$ composer require laravel/ui
	$ php artisan ui --auth bootstrap

Migrating migrations:
	$ php artisan migrate

Deleting migrations
	$ php artisan migrate:rollback

Deleting old migrations and migrating freshly
	$ php artisan migrate:fresh

Make model and migration
	$ php artisan make:model Product -m

Making seeder
	$ php artisan make:seeder ProductTableSeeder

Seeding db with seeder
	$ php artisan db:seed --class="ProductTableSeeder"

migrate specific table
	$ php artisan migrate --path=/database/migrations/2021_09_15_162252_create_user_types_table.php 
 
create resourceful controller and include model
	$ php artisan make:controller CustomersController --model=Customer

Create a middleware
	$ php artisan make:middleware IsAdmin

To see list of routes avaialble

	$ php artisan route:list

Create Rsourceful controller, model and include model
	$ php artisan make:controller UsersController -r -m User

Making migration table
	$ php artisan make:migration create_categories_table

This should run of we add manual hlper functions

	$ composer dump-autoload

Creating a sym link for storage

	$ php artisan storage:link

Clearing everything related to cache
	$ php artisan clear-compiled 
	$ php artisan optimize
	$ php artisan clear:cache
	$ php artisan route:clear
	$ php artisan config:clear
	$ php artisan config:cache

Making a ploicy
	$ php artisan make:policy CategoryPolicy -m Category

***************************************************************************************

Codeigniter 4 *******************************************************************************

php version above 7.3
php-intl extension should be enabled

Installation:
	$ composer create-project codeigniter4/appstarter codeigniter-4-sample

Giving permissions for writable folder
	$ sudo chmod -R 0777 writable

creating .env file
	$ cp env .env

Creating Controller:
	$ php spark make:controller UserController

Creating Model:
	$ php spark make:model User

Creating migration file:
	$ php spark make:migration Users

Seeding the db with seeder
	$ php spark migrate

See routes list
	$ php spark routes

Make a filter
	$ php spark make:filter Auth

***************************************************************************************

TypeScript Setup *******************************************************************************

Install typescript:

	with sudo 
	$ sudo npm install -g typescript
	
check typescript version

	$ tsc -v
	
TypeScript to your local project as dev dependency

	npm install typescript --save-dev
	
Init typescript config for local project

	$ tsc --init

***************************************************************************************

Angular Setup *******************************************************************************

    Installing angular cli
    $ sudo npm install -g @angular/cli

	Installing angular apps
	$ ng new my-app

    Starting angular server
    $ ng serve

    Creating component
    $ ng generate component xyz

***************************************************************************************

Nest JS Setup *******************************************************************************


    Installing nestjs cli
    $ sudo npm i -g @nestjs/cli

    New app creation
    $ nest new learn-nest

    starting app
    $ cd learn-nest
    $ npm run start

    Creating module
    $ nest g module users

    Installing package
    $ npm install mysql typeorm @nestjs/typeorm

    Creating Service
    $ nest g service users

    Creating controller
    $ nest g controller users

    Starting app 
    $ npm run start (or) $ nest start


***************************************************************************************

React Installation *******************************************************************************

	$ npx create-react-app react-codes
	$ cd react-codes/
	$ npm start

/////////////////////////////////////////////////////////////////////////////////////
Vue JS

Installing Vue cli:

	$ sudo npm install -g @vue/cli

Checking whether installed or not:

	$ vue --version

Working with Vuetify:

	$ vue add vuetify
	$ vue create my-app
	$ cd my-app/
	$ vue add vuetify

Serving application

	$ npm run serve

Installing a package:

	$ npm install vue-chartist
